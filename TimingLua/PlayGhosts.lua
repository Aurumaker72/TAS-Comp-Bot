--[[
    This script looks for "./ghostlist.txt" which contains a
    list of filepaths to .ghost files and plays them back
    Special thanks to Frame for making this possible
]]

-- ================================= --
-- Data Type Handling / File Reading --
-- ================================= --

function read_word(file)
    local data = {string.byte(file:read(1)), string.byte(file:read(1))}
    local n = (data[2] << 0x8) + data[1]
    return n
end

function read_little_endian_int(file)
    local bytes = file:read(4)
    local data = {}
    for b in bytes:gmatch('.') do data[#data + 1] = string.byte(b) end
    return (data[4] << 0x18) + (data[3] << 0x10) + (data[2] << 0x08) + (data[1] << 0x00)
end

-- https://en.wikipedia.org/wiki/Single-precision_floating-point_format
function read_float(file)
    local n = read_little_endian_int(file)
    local sign = (n & 0x80000000 > 0) and -1 or 1
    local exponent = ((n & 0x7F800000) >> 23) - 127
    local significand = 1.0
    local pow2 = 1.0
    local mask = 1 << 23
    for i = 1, 23 do
        pow2 = pow2 / 2
        mask = mask >> 1
        b = (n & mask) >> (23 - i)
        significand = significand + b * pow2
    end
    return sign * significand * 2^exponent
end

local function writebytes(address, bytes)
    for i = 1, #bytes, 1 do
        memory.writebyte(address + i - 1, bytes[i])
    end
end

-- ======================== --
-- Ghost File Data Handling --
-- ======================== --

local GLOBAL_TIMER_START = 0
local GhostData = {}
local Ghosts = {
    ["Global Timer Start"] = {},
    ["HatColor"] = {[0] = {0xFF, 0x00, 0x00}}, -- this is Mario's hat color
    ["Data"] = {}
}
local TRANSPARENT = nil
local GHOSTCOLORS = nil

--[[
    Note: all data is in little-endian
    Example Data:
        header (gt,frames 4-byte unsigned integers): [4F 21 00 00] [C1 01 00 00]
    Frame 0:
        offset (4-byte unsigned integer): [00 00 00 00]
        position (x,y,z all 4-byte floats): [00 00 00 00] [00 D8 8B 45] [00 00 00 00]
        animationIndex (2-byte signed integer): [CD 00]
        animationFrame (2-byte signed integer): [3D 00]
        angle (pitch,yaw,roll all 4-byte unsigned integers): [00 00 00 00] [A3 80 00 00] [00 00 00 00]
    ...
]]

function read_ghost_frame(file)
    return {
        offset = read_little_endian_int(file),
        position = {
            x = read_float(file),
            y = read_float(file),
            z = read_float(file)
        },
        animationIndex = read_word(file),
        animationFrame = read_word(file),
        pitch = read_little_endian_int(file),
        yaw = read_little_endian_int(file),
        roll = read_little_endian_int(file)
    }
end

function load_ghost(filename)
    local N = #Ghosts["Data"] + 1
    local ghostfile = io.open(filename, "rb")
    Ghosts["Global Timer Start"][N] = read_little_endian_int(ghostfile)
    SetColorForNewGhost(N)
    local num_frames = read_little_endian_int(ghostfile)
    Ghosts["Data"][N] = {}
    for i = 0, num_frames - 1 do
        Ghosts["Data"][N][i] = read_ghost_frame(ghostfile)
    end
end

-- ============================ --
-- RAM Hacking / Applying Ghost --
-- ============================ --

-- Details: https://github.com/FramePerfection/STROOP/tree/Development/HackSources/Ghosts
local HACKS = { -- US ROM only
    [0x80408000] = {0x27, 0xBD, 0xFF, 0xC0, 0x3C, 0x08, 0x80, 0x36, 0x8D, 0x08, 0x11, 0x58, 0x10, 0x08, 0x00, 0x6B, 0xAF, 0xBF, 0x00, 0x34, 0xAF, 0xB4, 0x00, 0x30, 0xAF, 0xB3, 0x00, 0x2C, 0xAF, 0xB2, 0x00, 0x28, 0xAF, 0xB1, 0x00, 0x24, 0xAF, 0xB0, 0x00, 0x20, 0x00, 0x08, 0xA0, 0x25, 0x86, 0x88, 0x00, 0x02, 0x31, 0x09, 0x00, 0x40, 0x15, 0x20, 0x00, 0x06, 0x35, 0x09, 0x00, 0x40, 0xA6, 0x89, 0x00, 0x02, 0x10, 0x00, 0x00, 0x58, 0x3C, 0x11, 0x80, 0x40, 0x10, 0x00, 0x00, 0x53, 0x36, 0x31, 0x7F, 0xF8, 0x3C, 0x13, 0x80, 0x50, 0x3C, 0x18, 0x80, 0x37, 0x34, 0x01, 0x00, 0xBD, 0xA7, 0x01, 0x05, 0xA8, 0x37, 0x01, 0x05, 0xB8, 0xAF, 0x01, 0x05, 0x98, 0x3C, 0x01, 0x80, 0x06, 0x24, 0x21, 0x40, 0x40, 0xAF, 0x01, 0x05, 0xB8, 0x00, 0x00, 0x80, 0x25, 0x3C, 0x01, 0x80, 0x40, 0x34, 0x31, 0x7F, 0xF8, 0x80, 0x21, 0x7F, 0xFF, 0x10, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x15, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x20, 0x25, 0x26, 0x25, 0xFF, 0x9C, 0x8E, 0x86, 0x00, 0x14, 0x3C, 0x07, 0x80, 0x38, 0x34, 0xE1, 0x5F, 0xDC, 0xAF, 0xA1, 0x00, 0x10, 0x34, 0xE1, 0x5F, 0xE4, 0xAF, 0xA1, 0x00, 0x14, 0x0C, 0x0D, 0xEE, 0x78, 0x34, 0xE7, 0x5F, 0xD0, 0xAE, 0x22, 0x00, 0x00, 0x8E, 0x84, 0x00, 0x0C, 0x0C, 0x0D, 0xF0, 0x11, 0x00, 0x40, 0x28, 0x25, 0x8E, 0x32, 0x00, 0x00, 0x82, 0x89, 0x00, 0x18, 0xA2, 0x49, 0x00, 0x18, 0x8E, 0x89, 0x00, 0x38, 0xAE, 0x49, 0x00, 0x38, 0x3C, 0x01, 0x80, 0x33, 0x8C, 0x28, 0xD5, 0xD4, 0x31, 0x08, 0x00, 0x7F, 0x00, 0x08, 0x41, 0x40, 0x00, 0x10, 0x4B, 0x00, 0x01, 0x09, 0x40, 0x21, 0x3C, 0x01, 0x80, 0x41, 0x01, 0x01, 0x40, 0x21, 0x25, 0x08, 0x9B, 0x00, 0x8D, 0x09, 0x00, 0x00, 0xAE, 0x49, 0x00, 0x20, 0x8D, 0x09, 0x00, 0x04, 0xAE, 0x49, 0x00, 0x24, 0x8D, 0x09, 0x00, 0x08, 0xAE, 0x49, 0x00, 0x28, 0x8D, 0x09, 0x00, 0x10, 0xA6, 0x49, 0x00, 0x1A, 0x8D, 0x09, 0x00, 0x14, 0xA6, 0x49, 0x00, 0x1C, 0x8D, 0x09, 0x00, 0x18, 0xA6, 0x49, 0x00, 0x1E, 0x3C, 0x18, 0x80, 0x37, 0xAF, 0x12, 0x05, 0x80, 0xAF, 0x13, 0x05, 0xC0, 0x85, 0x09, 0x00, 0x1C, 0xA7, 0xA9, 0x00, 0x38, 0x37, 0x04, 0x04, 0xF8, 0xA6, 0x40, 0x00, 0x38, 0xAF, 0x00, 0x05, 0xBC, 0x0C, 0x09, 0x42, 0x6E, 0x8D, 0x05, 0x00, 0x0C, 0x87, 0xA9, 0x00, 0x38, 0xA6, 0x49, 0x00, 0x40, 0x26, 0x73, 0x40, 0x00, 0x26, 0x31, 0xFF, 0x98, 0x26, 0x10, 0x00, 0x01, 0x3C, 0x01, 0x80, 0x40, 0x80, 0x21, 0x7F, 0xFF, 0x02, 0x01, 0x40, 0x2B, 0x15, 0x00, 0xFF, 0xC3, 0xA2, 0x50, 0x00, 0x60, 0x8E, 0x32, 0x00, 0x00, 0x12, 0x40, 0x00, 0x06, 0x00, 0x12, 0x20, 0x25, 0x0C, 0x0D, 0xF0, 0x2F, 0xAE, 0x20, 0x00, 0x00, 0x8E, 0x24, 0x00, 0x00, 0x14, 0x80, 0xFF, 0xFC, 0x26, 0x31, 0xFF, 0x98, 0x8F, 0xBF, 0x00, 0x34, 0x8F, 0xB4, 0x00, 0x30, 0x8F, 0xB3, 0x00, 0x2C, 0x8F, 0xB2, 0x00, 0x28, 0x8F, 0xB1, 0x00, 0x24, 0x8F, 0xB0, 0x00, 0x20, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x40},
    [0x80277988] = {0x3C, 0x09, 0x80, 0x34, 0x25, 0x2A, 0xB1, 0x70, 0x3C, 0x19, 0x80, 0x33, 0x8F, 0x39, 0xDF, 0x00, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x17, 0x21, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    [0x802770a4] = {0x27, 0xBD, 0xFF, 0xD0, 0xAF, 0xBF, 0x00, 0x14, 0x24, 0x01, 0x00, 0x01, 0x14, 0x81, 0x00, 0x23, 0x00, 0x00, 0x10, 0x25, 0x00, 0xA0, 0x20, 0x25, 0x3C, 0x08, 0x80, 0x34, 0x25, 0x08, 0xB3, 0xB0, 0x8C, 0xB8, 0x00, 0x18, 0x00, 0x18, 0xC8, 0x80, 0x03, 0x38, 0xC8, 0x21, 0x00, 0x19, 0xC8, 0xC0, 0x03, 0x28, 0x48, 0x21, 0x3C, 0x08, 0x80, 0x33, 0x8D, 0x08, 0xDF, 0x00, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x15, 0x01, 0x00, 0x08, 0x3C, 0x18, 0x80, 0x40, 0x85, 0x2C, 0x00, 0x08, 0x31, 0x8D, 0x01, 0x00, 0x11, 0xA0, 0x00, 0x02, 0x34, 0x05, 0x00, 0xFF, 0x31, 0x85, 0x00, 0xFF, 0x10, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x81, 0x18, 0x00, 0x61, 0x13, 0x00, 0x00, 0x09, 0x34, 0x05, 0x00, 0xFF, 0x34, 0x05, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x09, 0xDB, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xBF, 0x00, 0x14, 0x27, 0xBD, 0x00, 0x30, 0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00},
    [0x802776D8] = {0x27, 0xBD, 0xFF, 0xF8, 0x3C, 0x19, 0x80, 0x34, 0x27, 0x39, 0xB3, 0xB0, 0x3C, 0x08, 0x80, 0x33, 0x8D, 0x08, 0xDF, 0x00, 0x81, 0x0A, 0x00, 0x61, 0x11, 0x40, 0x00, 0x10, 0x83, 0x09, 0x00, 0x08, 0xA4, 0xA9, 0x00, 0x1E, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x11, 0x01, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0xA4, 0xAA, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x25, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x08},
    [0x8027B188] = {0x0C, 0x10, 0x20, 0x00}, -- Hooks the ghost update function into area_update_objects
    [0x8027719C] = {0x34, 0x0C, 0x00, 0x01}, -- disables low resolution Mario entirely
    -- gfx_generate_colored_hats:
    [0x80408200] = {0x27, 0xBD, 0xFF, 0xC0, 0xAF, 0xBF, 0x00, 0x14, 0x3C, 0x09, 0x04, 0x01, 0x35, 0x28, 0x19, 0xA0, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x3C, 0x18, 0x80, 0x33, 0x8F, 0x18, 0xDF, 0x00, 0x13, 0x01, 0x00, 0x02, 0x00, 0x00, 0x50, 0x25, 0x83, 0x0A, 0x00, 0x60, 0x35, 0x29, 0x19, 0x78, 0xAF, 0xA8, 0x00, 0x18, 0xAF, 0xA9, 0x00, 0x1C, 0xAF, 0xAA, 0x00, 0x20, 0x24, 0x01, 0x00, 0x01, 0x14, 0x24, 0x00, 0x1B, 0x34, 0x04, 0x00, 0x38, 0x0C, 0x09, 0xE3, 0xCB, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x0C, 0x06, 0x00, 0xAC, 0x4C, 0x00, 0x10, 0x8F, 0xA1, 0x00, 0x18, 0xAC, 0x41, 0x00, 0x14, 0x3C, 0x01, 0x03, 0x88, 0x34, 0x21, 0x00, 0x10, 0xAC, 0x41, 0x00, 0x18, 0xAC, 0x41, 0x00, 0x00, 0x3C, 0x08, 0x80, 0x40, 0x35, 0x08, 0x83, 0x00, 0x8F, 0xA9, 0x00, 0x20, 0x00, 0x09, 0x49, 0x40, 0x01, 0x28, 0x50, 0x21, 0xAC, 0x4A, 0x00, 0x1C, 0xAC, 0x4A, 0x00, 0x04, 0x3C, 0x01, 0x03, 0x86, 0x34, 0x21, 0x00, 0x10, 0xAC, 0x41, 0x00, 0x20, 0xAC, 0x41, 0x00, 0x08, 0x25, 0x4B, 0x00, 0x08, 0xAC, 0x4B, 0x00, 0x24, 0xAC, 0x4B, 0x00, 0x0C, 0xAC, 0x4C, 0x00, 0x28, 0x8F, 0xA8, 0x00, 0x1C, 0xAC, 0x48, 0x00, 0x2C, 0x3C, 0x01, 0xB8, 0x00, 0xAC, 0x41, 0x00, 0x30, 0x8F, 0xBF, 0x00, 0x14, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x40}
}

function write_ghost_frame(offset, ghost, ghostidx)
    local addr = 0x80409B00
    ghostidx = ghostidx - 1
    memory.writefloat(addr + ghostidx * 0x1000 + offset * 0x20 + 0x00, ghost.position.x)
    memory.writefloat(addr + ghostidx * 0x1000 + offset * 0x20 + 0x04, ghost.position.y)
    memory.writefloat(addr + ghostidx * 0x1000 + offset * 0x20 + 0x08, ghost.position.z)
    memory.writeword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x0E, ghost.animationIndex)
    memory.writedword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x10, ghost.pitch)
    memory.writedword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x14, ghost.yaw)
    memory.writedword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x18, ghost.roll)
    memory.writeword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x1C, ghost.animationFrame)
end

function last_valid_ghost_frame(ghostdata, index)
    if 0 <= index and index < #ghostdata then
        return ghostdata[index]
    end
    return ghostdata[#ghostdata]
end

function write_ghost_data(transparent)
    local N = #Ghosts["Data"]
    memory.writebyte(0x80407FFF, N) -- number of ghosts to load
    WriteMarioColorToStream()
    local globalTimer = memory.readdword(0x00B2D5D4) -- U address
    for n = 1, N do
        for tm = 0, 0x7F do
            local offset = (tm + globalTimer) & 0x7F
            local i = globalTimer + tm - Ghosts["Global Timer Start"][n] + 1
            write_ghost_frame(offset, last_valid_ghost_frame(Ghosts["Data"][n], i), n)
        end
        WriteGhostColorToStream(n)
        local ptr = memory.readdword(0x80407ff8 - 0x68 * (n-1)) + 0x61
        memory.writebyte(ptr, transparent and 1 or 0)
    end
end

-- Coloured hats
-- Source: https://github.com/FramePerfection/STROOP/blob/Development/STROOP/Tabs/GhostTab/ColoredHats.cs

local defaultGhostColorCounter = 1
local DefaultGhostColors = {
    {255, 0, 0},
    {255, 127, 0},
    {255, 255, 0},
    {0, 255, 0},
    {0, 255, 255},
    {0, 0, 255},
    {255, 255, 255},
    {51, 51, 51}
}
local VANILLA_BANK_04_OFFSET_US = 0x0007EC20
local S_SEGMENT_TABLE_OFFSET_US = 0x8033B400
local COLORED_HATS_CODE_TARGET_ADDR = 0x80408200
local COLORED_HATS_LIGHTS_ADDR = 0x80408300

table.includes = function(t, x)
    for k,v in pairs(t) do
        if x == v then
            return true
        end
    end
    return false
end

function EnableColoredHats()
    local originalDisplayListPointers = {
        0x40119A0,
        0x4011A90,
        0x4011B80,
        0x4012030,
    }
    local vanillaOffset = VANILLA_BANK_04_OFFSET_US
    local bank0x04Size = 0x100000 - vanillaOffset --Rough estimate, relevant references should be in this range
    local segmentTableOffset = S_SEGMENT_TABLE_OFFSET_US
    local bank0x04Location = memory.readdword(segmentTableOffset + 0x10) -- GetInt32
    local bank0x04Offset = bank0x04Location - vanillaOffset

    for addr = bank0x04Location, bank0x04Location + bank0x04Size, 4 do
        if (memory.readdword(addr) & 0xFFFF0000) == 0x001B0000 then -- GetInt32
            local foundPointer = memory.readdword(addr + 0x14) -- GetUInt32
            if table.includes(originalDisplayListPointers, foundPointer) then
                memory.writedword(addr + 0x14, COLORED_HATS_CODE_TARGET_ADDR)
                memory.writeword(addr, 0x12A)
            end
        end
    end

    local findOutWhatToCallThis = 0x90580
    local jumpOutOfHeadAddr = (findOutWhatToCallThis + bank0x04Offset) + 0x8
    writebytes(jumpOutOfHeadAddr, {0xB8, 0, 0, 0, 0, 0, 0, 0})
    local offsetA = 0xf470c - bank0x04Location

    -- Disable low poly Mario by finding the LOD threshold values and replacing them with the maximum distance (0x7fff) as appropriate
    for addr = bank0x04Location, bank0x04Location + bank0x04Size, 4 do
        local value = memory.readdword(addr) -- GetUInt32
        if value == 0x02580640 then
            memory.writedword(addr, 0x02587fff)
        elseif value == 0x06407fff then
            memory.writedword(addr, 0x7fff7fff)
        end
    end
end

function apply_hacks()
    for addr,hck in pairs(HACKS) do
        writebytes(addr, hck)
    end

    -- clear some memory to prevent nonsensical data causing a game crash on the first ghost loop iteration
    memory.writedword(0x80407FFC, 0)
    for i = 0, 0x70 - 1, 4 do
        memory.writedword(0x80407F90 + i, 0)
    end

    EnableColoredHats()
end

local max = math.max
local min = math.min
local function clamp(x)
    return max(0, min(255, x))
end

function ColorToLights(RGB)
    local R1 = clamp(RGB[1])
    local G1 = clamp(RGB[2])
    local B1 = clamp(RGB[3])
    local R2 = clamp(RGB[1] // 2)
    local G2 = clamp(RGB[2] // 2)
    local B2 = clamp(RGB[3] // 2)
    return {
          R2,   G2,   B2, 0x00,   R2,   G2,   B2, 0x00,
          R1,   G1,   B1, 0x00,   R1,   G1,   B1, 0x00,
        0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
    }
end

function SetColorForNewGhost(ghostIndex)
    if ghostIndex <= #GHOSTCOLORS then
        Ghosts["HatColor"][ghostIndex] = GHOSTCOLORS[ghostIndex]
    else
        Ghosts["HatColor"][ghostIndex] = DefaultGhostColors[defaultGhostColorCounter + 1]
        defaultGhostColorCounter = (defaultGhostColorCounter + 1) % #DefaultGhostColors
    end
end

function WriteGhostColorToStream(ghostIndex)
    local color = {204, 204, 204}
    if ghostIndex <= #Ghosts["HatColor"] then
        color = Ghosts["HatColor"][ghostIndex]
    end
    local lights = ColorToLights(color)
    writebytes(COLORED_HATS_LIGHTS_ADDR + ghostIndex * 0x20, lights)
end

function WriteMarioColorToStream()
    WriteGhostColorToStream(0)
end

-- ================== --
-- Running the script --
-- ================== --

-- load settings from "./ghostlist.txt"
-- line 1: "1" or "true" will set all the ghosts as transparent
-- line 2: r g b r g b ... list of numbers
   -- this is for the colours of the ghosts. It can be an empty list
   -- if less than 3 numbers are provided, it will be ignored
-- lines 3+: file/path/to/tas.ghost

PATH = debug.getinfo(1).source:sub(2):match("(.*\\)")
for line in io.lines(PATH.."ghostlist.txt") do
    if TRANSPARENT == nil then
        TRANSPARENT = (line == "1" or line == "true")
    elseif GHOSTCOLORS == nil then
        GHOSTCOLORS = {}
        local color = {}
        for n in line:gmatch("([^ ]+)") do -- space separated numbers
            color[#color + 1] = tonumber(n) or 0 -- default to 0
            if #color == 3 then
                GHOSTCOLORS[#GHOSTCOLORS + 1] = {
                    clamp(color[1]), clamp(color[2]), clamp(color[3])
                }
                color = {}
            end
        end
    else
        load_ghost(line)
    end
end

emu.atloadstate(apply_hacks)
emu.atinput(function() write_ghost_data(TRANSPARENT) end)
