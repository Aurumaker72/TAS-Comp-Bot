--[[
    This script looks for "./ghostlist.txt" which contains a
    list of filepaths to .ghost files and plays them back
    Special thanks to Frame for making this possible
]]

-- ================================= --
-- Data Type Handling / File Reading --
-- ================================= --

function read_word(file)
    local data = {string.byte(file:read(1)), string.byte(file:read(1))}
    local n = (data[2] << 0x8) + data[1]
    return n
end

function read_little_endian_int(file)
    local bytes = file:read(4)
    local data = {}
    for b in bytes:gmatch('.') do data[#data + 1] = string.byte(b) end
    return (data[4] << 0x18) + (data[3] << 0x10) + (data[2] << 0x08) + (data[1] << 0x00)
end

-- https://en.wikipedia.org/wiki/Single-precision_floating-point_format
function read_float(file)
    local n = read_little_endian_int(file)
    local sign = (n & 0x80000000 > 0) and -1 or 1
    local exponent = ((n & 0x7F800000) >> 23) - 127
    local significand = 1.0
    local pow2 = 1.0
    local mask = 1 << 23
    for i = 1, 23 do
        pow2 = pow2 / 2
        mask = mask >> 1
        b = (n & mask) >> (23 - i)
        significand = significand + b * pow2
    end
    return sign * significand * 2^exponent
end

-- ======================== --
-- Ghost File Data Handling --
-- ======================== --

local GLOBAL_TIMER_START = 0
local GhostData = {}
local Ghosts = {
    ["Global Timer Start"] = {},
    ["Data"] = {}
}

--[[
    Note: all data is in little-endian
    Example Data:
        header (gt,frames 4-byte unsigned integers): [4F 21 00 00] [C1 01 00 00]
    Frame 0:
        offset (4-byte unsigned integer): [00 00 00 00]
        position (x,y,z all 4-byte floats): [00 00 00 00] [00 D8 8B 45] [00 00 00 00]
        animationIndex (2-byte signed integer): [CD 00]
        animationFrame (2-byte signed integer): [3D 00]
        angle (pitch,yaw,roll all 4-byte unsigned integers): [00 00 00 00] [A3 80 00 00] [00 00 00 00]
    ...
]]

function read_ghost_frame(file)
    return {
        offset = read_little_endian_int(file),
        position = {
            x = read_float(file),
            y = read_float(file),
            z = read_float(file)
        },
        animationIndex = read_word(file),
        animationFrame = read_word(file),
        pitch = read_little_endian_int(file),
        yaw = read_little_endian_int(file),
        roll = read_little_endian_int(file)
    }
end

function load_ghost(filename)
    local N = #Ghosts["Data"] + 1
    local ghostfile = io.open(filename, "rb")
    Ghosts["Global Timer Start"][N] = read_little_endian_int(ghostfile)
    local num_frames = read_little_endian_int(ghostfile)
    Ghosts["Data"][N] = {}
    for i = 0, num_frames - 1 do
        Ghosts["Data"][N][i] = read_ghost_frame(ghostfile)
    end
end

-- ============================ --
-- RAM Hacking / Applying Ghost --
-- ============================ --

-- Details: https://github.com/FramePerfection/STROOP/tree/Development/HackSources/Ghosts
local HACKS = { -- US ROM only
    [0x80408000] = {0x27, 0xBD, 0xFF, 0xC0, 0x3C, 0x08, 0x80, 0x36, 0x8D, 0x08, 0x11, 0x58, 0x10, 0x08, 0x00, 0x6B, 0xAF, 0xBF, 0x00, 0x34, 0xAF, 0xB4, 0x00, 0x30, 0xAF, 0xB3, 0x00, 0x2C, 0xAF, 0xB2, 0x00, 0x28, 0xAF, 0xB1, 0x00, 0x24, 0xAF, 0xB0, 0x00, 0x20, 0x00, 0x08, 0xA0, 0x25, 0x86, 0x88, 0x00, 0x02, 0x31, 0x09, 0x00, 0x40, 0x15, 0x20, 0x00, 0x06, 0x35, 0x09, 0x00, 0x40, 0xA6, 0x89, 0x00, 0x02, 0x10, 0x00, 0x00, 0x58, 0x3C, 0x11, 0x80, 0x40, 0x10, 0x00, 0x00, 0x53, 0x36, 0x31, 0x7F, 0xF8, 0x3C, 0x13, 0x80, 0x50, 0x3C, 0x18, 0x80, 0x37, 0x34, 0x01, 0x00, 0xBD, 0xA7, 0x01, 0x05, 0xA8, 0x37, 0x01, 0x05, 0xB8, 0xAF, 0x01, 0x05, 0x98, 0x3C, 0x01, 0x80, 0x06, 0x24, 0x21, 0x40, 0x40, 0xAF, 0x01, 0x05, 0xB8, 0x00, 0x00, 0x80, 0x25, 0x3C, 0x01, 0x80, 0x40, 0x34, 0x31, 0x7F, 0xF8, 0x80, 0x21, 0x7F, 0xFF, 0x10, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x15, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x20, 0x25, 0x26, 0x25, 0xFF, 0x9C, 0x8E, 0x86, 0x00, 0x14, 0x3C, 0x07, 0x80, 0x38, 0x34, 0xE1, 0x5F, 0xDC, 0xAF, 0xA1, 0x00, 0x10, 0x34, 0xE1, 0x5F, 0xE4, 0xAF, 0xA1, 0x00, 0x14, 0x0C, 0x0D, 0xEE, 0x78, 0x34, 0xE7, 0x5F, 0xD0, 0xAE, 0x22, 0x00, 0x00, 0x8E, 0x84, 0x00, 0x0C, 0x0C, 0x0D, 0xF0, 0x11, 0x00, 0x40, 0x28, 0x25, 0x8E, 0x32, 0x00, 0x00, 0x82, 0x89, 0x00, 0x18, 0xA2, 0x49, 0x00, 0x18, 0x8E, 0x89, 0x00, 0x38, 0xAE, 0x49, 0x00, 0x38, 0x3C, 0x01, 0x80, 0x33, 0x8C, 0x28, 0xD5, 0xD4, 0x31, 0x08, 0x00, 0x7F, 0x00, 0x08, 0x41, 0x40, 0x00, 0x10, 0x4B, 0x00, 0x01, 0x09, 0x40, 0x21, 0x3C, 0x01, 0x80, 0x41, 0x01, 0x01, 0x40, 0x21, 0x25, 0x08, 0x9B, 0x00, 0x8D, 0x09, 0x00, 0x00, 0xAE, 0x49, 0x00, 0x20, 0x8D, 0x09, 0x00, 0x04, 0xAE, 0x49, 0x00, 0x24, 0x8D, 0x09, 0x00, 0x08, 0xAE, 0x49, 0x00, 0x28, 0x8D, 0x09, 0x00, 0x10, 0xA6, 0x49, 0x00, 0x1A, 0x8D, 0x09, 0x00, 0x14, 0xA6, 0x49, 0x00, 0x1C, 0x8D, 0x09, 0x00, 0x18, 0xA6, 0x49, 0x00, 0x1E, 0x3C, 0x18, 0x80, 0x37, 0xAF, 0x12, 0x05, 0x80, 0xAF, 0x13, 0x05, 0xC0, 0x85, 0x09, 0x00, 0x1C, 0xA7, 0xA9, 0x00, 0x38, 0x37, 0x04, 0x04, 0xF8, 0xA6, 0x40, 0x00, 0x38, 0xAF, 0x00, 0x05, 0xBC, 0x0C, 0x09, 0x42, 0x6E, 0x8D, 0x05, 0x00, 0x0C, 0x87, 0xA9, 0x00, 0x38, 0xA6, 0x49, 0x00, 0x40, 0x26, 0x73, 0x40, 0x00, 0x26, 0x31, 0xFF, 0x98, 0x26, 0x10, 0x00, 0x01, 0x3C, 0x01, 0x80, 0x40, 0x80, 0x21, 0x7F, 0xFF, 0x02, 0x01, 0x40, 0x2B, 0x15, 0x00, 0xFF, 0xC3, 0xA2, 0x50, 0x00, 0x60, 0x8E, 0x32, 0x00, 0x00, 0x12, 0x40, 0x00, 0x06, 0x00, 0x12, 0x20, 0x25, 0x0C, 0x0D, 0xF0, 0x2F, 0xAE, 0x20, 0x00, 0x00, 0x8E, 0x24, 0x00, 0x00, 0x14, 0x80, 0xFF, 0xFC, 0x26, 0x31, 0xFF, 0x98, 0x8F, 0xBF, 0x00, 0x34, 0x8F, 0xB4, 0x00, 0x30, 0x8F, 0xB3, 0x00, 0x2C, 0x8F, 0xB2, 0x00, 0x28, 0x8F, 0xB1, 0x00, 0x24, 0x8F, 0xB0, 0x00, 0x20, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x40},
    [0x80277988] = {0x3C, 0x09, 0x80, 0x34, 0x25, 0x2A, 0xB1, 0x70, 0x3C, 0x19, 0x80, 0x33, 0x8F, 0x39, 0xDF, 0x00, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x17, 0x21, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    [0x802770a4] = {0x27, 0xBD, 0xFF, 0xD0, 0xAF, 0xBF, 0x00, 0x14, 0x24, 0x01, 0x00, 0x01, 0x14, 0x81, 0x00, 0x23, 0x00, 0x00, 0x10, 0x25, 0x00, 0xA0, 0x20, 0x25, 0x3C, 0x08, 0x80, 0x34, 0x25, 0x08, 0xB3, 0xB0, 0x8C, 0xB8, 0x00, 0x18, 0x00, 0x18, 0xC8, 0x80, 0x03, 0x38, 0xC8, 0x21, 0x00, 0x19, 0xC8, 0xC0, 0x03, 0x28, 0x48, 0x21, 0x3C, 0x08, 0x80, 0x33, 0x8D, 0x08, 0xDF, 0x00, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x15, 0x01, 0x00, 0x08, 0x3C, 0x18, 0x80, 0x40, 0x85, 0x2C, 0x00, 0x08, 0x31, 0x8D, 0x01, 0x00, 0x11, 0xA0, 0x00, 0x02, 0x34, 0x05, 0x00, 0xFF, 0x31, 0x85, 0x00, 0xFF, 0x10, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x81, 0x18, 0x00, 0x61, 0x13, 0x00, 0x00, 0x09, 0x34, 0x05, 0x00, 0xFF, 0x34, 0x05, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x09, 0xDB, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xBF, 0x00, 0x14, 0x27, 0xBD, 0x00, 0x30, 0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00},
    [0x802776D8] = {0x27, 0xBD, 0xFF, 0xF8, 0x3C, 0x19, 0x80, 0x34, 0x27, 0x39, 0xB3, 0xB0, 0x3C, 0x08, 0x80, 0x33, 0x8D, 0x08, 0xDF, 0x00, 0x81, 0x0A, 0x00, 0x61, 0x11, 0x40, 0x00, 0x10, 0x83, 0x09, 0x00, 0x08, 0xA4, 0xA9, 0x00, 0x1E, 0x3C, 0x01, 0x80, 0x36, 0x8C, 0x21, 0x11, 0x58, 0x11, 0x01, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0xA4, 0xAA, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x25, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x08},
    [0x8027B188] = {0x0C, 0x10, 0x20, 0x00}, -- Hooks the ghost update function into area_update_objects
    [0x8027719C] = {0x34, 0x0C, 0x00, 0x01} -- disables low resolution Mario entirely
}

function apply_hacks()
    for addr,hck in pairs(HACKS) do
        for i = 1, #hck do
            memory.writebyte(addr + i - 1, hck[i])
        end
    end
end

function write_ghost_frame(offset, ghost, ghostidx)
    local addr = 0x80409B00
    ghostidx = ghostidx - 1
    memory.writefloat(addr + ghostidx * 0x1000 + offset * 0x20 + 0x00, ghost.position.x)
    memory.writefloat(addr + ghostidx * 0x1000 + offset * 0x20 + 0x04, ghost.position.y)
    memory.writefloat(addr + ghostidx * 0x1000 + offset * 0x20 + 0x08, ghost.position.z)
    memory.writeword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x0E, ghost.animationIndex)
    memory.writedword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x10, ghost.pitch)
    memory.writedword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x14, ghost.yaw)
    memory.writedword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x18, ghost.roll)
    memory.writeword(addr + ghostidx * 0x1000 + offset * 0x20 + 0x1C, ghost.animationFrame)
end

function last_valid_ghost_frame(ghostdata, index)
    if 0 <= index and index < #ghostdata then
        return ghostdata[index]
    end
    return ghostdata[#ghostdata]
end

function write_ghost_data(transparent)
    local N = #Ghosts["Data"]
    memory.writebyte(0x80407FFF, N) -- number of ghosts to load
    local globalTimer = memory.readdword(0x00B2D5D4) -- U address
    for n = 1, N do
        for tm = 0, 0x7F do
            local offset = (tm + globalTimer) & 0x7F
            local i = globalTimer + tm - Ghosts["Global Timer Start"][n] + 1
            write_ghost_frame(offset, last_valid_ghost_frame(Ghosts["Data"][n], i), n)
        end
        local ptr = memory.readdword(0x80407ff8 - 0x68 * (n-1)) + 0x61
        memory.writebyte(ptr, transparent and 1 or 0)
    end
end

-- ================== --
-- Running the script --
-- ================== --

PATH = debug.getinfo(1).source:sub(2):match("(.*\\)")
for ghostfilepath in io.lines(PATH.."ghostlist.txt") do
    load_ghost(ghostfilepath)
end
emu.atloadstate(apply_hacks)
emu.atinput(function() write_ghost_data(true) end)
